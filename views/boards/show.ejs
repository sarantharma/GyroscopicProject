<% layout('layouts/boilerplate') %>
<h1 class="board-title"><%= board.name %></h1>
<p class="board-description"><%= board.description %></p>
<p class="board-owner" data-boardOwner="<%=board.owner.username%> ">Created By: <%= board.owner.username %></p>
<p class="board-date text-muted"><%= board.date.toLocaleString("en-US") %></p>

<% if(board.team != null) { %>
  <p class="team">Team: <%= board.team.name %></p>
<% } %>

<div class="d-flex justify-content-evenly">
  <% for(let column of board.columns){ %>

  <!-- card for each column -->
  <div class="card column" id="<%=`${column._id}`%>">
    <h5 class="card-title"><%=column.header%></h5>

    <!-- <div class="comment-form-div"> -->
    <!-- _${column.columnOrder} -->
    <% if(currentUser){ %> 
    <form
      class="comment-form"
      data-ownerId="<%=currentUser ? currentUser._id : `anonymous`%>"
      data-ownerName="<%=currentUser ? currentUser.username : `anonymous`%>"

      action=""
    >
      <textarea
        class="form-control comment-textarea"
        type="text"
        name="board[description]"
        required
      ></textarea>
        <div>
            <div style="float: left; width:50%;">
                <button class="btn comment-button">Send</button>
            </div>
            <div style="float: right; width:50%; padding-top: 18px;">
                <input class="form-check-input is-anonymous" type="checkbox" value="" name="anonymous">
                <label class="form-check-label">Anonymous Comment</label>
            </div>
        </div>
    </form>
    <% } %> 
    <!-- </div> -->

    <!-- Comments -->
    <div class="card-comment">
      <% for(let comment of column.comments){ %>
      <div class="card mb-2 draggable" draggable="true" id="<%=comment._id%>">
        <div class="card-body">
          <input type="hidden" value="<%=comment.owner._id%>" >
          <% if(currentUser && (comment.owner.equals(currentUser) || board.owner.equals(currentUser))){ %>
          <div class="delete-comment">
            <img
              class="remove-comment"
              src="/img/xmark.svg"
              alt="like"
              style="height: 1em; width: 1em"
            />
          </div>
          <% }else{ %>
          <input type="hidden">
          <% } %>
          <p class="card-text comment-edit"><%=comment.content%></p>
          <div class="like-dislike">
            <% if( !comment.anonymous ){ %>
            <p class="comment-owner"><%=comment.owner.username%></p>
            <% } else { %>
            <p class="comment-owner"></p>
            <% } %>
            <img
              src="/img/like.svg"
              alt="like"
              style="height: 1em; width: 1em"
              class="like"
            />
            <p class="likeCount"></p>
            <img
              src="/img/dislike.svg"
              alt="dislike"
              style="height: 1em; width: 1em"
              class="dislike"
            />
            <p class="dislikeCount"></p>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </div>
  <% } %>
</div>

<!-- Add column -->
<div style="position: absolute; left: 50%;">
  <% if(currentUser && board.owner.equals(currentUser)){ %>
    <button class="btn btn-outline-secondary" onclick="showAddColumn()">Add Column</button>
  <% } %>

    <div class="add-column">
      <form id="add-column-form" style="display: none;" action="/boards/<%=board._id%>?_method=POST" method="POST">
        <label class="form-label" for="add-column-name">Column Name</label>
        <input class="add-column-name" type="text" id="add-column-name" name="newColumnName" required />
        <button class="btn btn-success">Add</button>
      </form>
    </div>
</div>

<div class="all-buttons">
  <% if(currentUser && board.owner.equals(currentUser)){ %>
  <a href="/boards/<%=board._id%>/edit"
    ><button class="btn btn-outline-secondary">Edit</button></a
  >

  <form action="/boards/<%=board._id%>?_method=DELETE" method="POST">
    <button class="btn btn-outline-danger">Delete</button>
  </form>
  <% } %>
  <a href="/boards"><button class="btn btn-outline-info">All Boards</button></a>

</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  // Temperary Variables
  let parentColumn;
  let appendContainer;
  let newColumn;
  let currentDragging;

  // Initiate Socket in show.ejs
  const socket = io();

  // Get html elements
  const form = document.getElementsByClassName("comment-form"); // Comment form to create a comment
  const input = document.getElementsByClassName("comment-textarea"); // Text area to type a comment
  const anonymous = document.getElementsByClassName("is-anonymous"); // anonymous toggle
  const comments = document.querySelectorAll(".card-comment"); // All comments
  let removes = document.querySelectorAll(".remove-comment");

  let draggables = document.querySelectorAll(".draggable"); // Single comments (each comment is draggable)

  const currentUser = form[0].dataset.ownerid;
  const currentUsername = form[0].dataset.ownername.trim();


  const boardOwner = document.querySelector('.board-owner');
  const boardOwnername = boardOwner.dataset.boardowner.trim();
  

  // ==Functions =======================================

  // Show add column button for board creators
  function showAddColumn() {
    // Make add button visible
    document.getElementById('add-column-form').style.display = 'block';
  }

  const deleteComment = () => {
    draggables = document.querySelectorAll(".card-comment");
    removes = document.querySelectorAll(".remove-comment");
    draggables.forEach((comment) => {});

    removes.forEach((remove) => {
      remove.addEventListener("click", (e) => {
        // console.log(e.target.offsetParent.id);
        socket.emit("remove comment", e.target.offsetParent.id);
      });
    });

    socket.on("remove comment", (cmtID) => {
      const deleteComment = document.getElementById(`${cmtID}`);
      if (deleteComment) {
        deleteComment.remove();
      }
    });
  };

  const dragStartEnd = () => {
    //  Treverse through all the draggable elements
    draggables = document.querySelectorAll(".draggable");
    draggables.forEach((draggable) => {
      // The start tof dragging
      draggable.addEventListener("dragstart", () => {
        draggable.classList.add("dragging"); //Add a class called "dragging" to the dragging element

      });

      // The end of dragging
      draggable.addEventListener("dragend", () => {
        let draggable = document.querySelector(".dragging"); //select the dragging element
        currentDragging = draggable; //Set it to a global variable
        if(draggable){
          appendContainer.appendChild(draggable); //Append the draggable element to the container (correspoding column)
        draggable.classList.remove("dragging"); //Remove the dragging class from the dragging element (after append)

        newColumn = draggable.parentNode.parentNode; //Set the newly added column into a global variable

        // Send the dragged and dropped element to the server side (Real time)
        socket.emit(
          "drag comment",
          draggable.id,
          parentColumn.id,
          newColumn.id
        );
        }else{
          draggable = null;
        }

        parentColumn = undefined; //Set the global variable undifined
      });
    });
  };

  const dragSocket = () => {
    // Reveive real time update from the server side for drag and drop
    // Recevied comment, new column Id, parent column Id
    socket.on("drag comment", function (cmt, newColumnId, parentID, cmtUser) {
      const comment = document.getElementById(`${cmt._id}`); //Get the comment
      const checkComment = comment.parentNode;
      const newColumn = document
        .getElementById(`${newColumnId}`)
        .querySelector(".card-comment"); // Get the newly dropped column

      const draggables = newColumn.querySelectorAll(".draggable"); // Get all the draggable element from the newly added column

      // temporary id array for draggables
      let idArray = [];

      // push all the draggable id to the temporary array
      draggables.forEach((draggable) => {
        idArray.push(draggable.id);
      });

      // Check if the draggable already included to the newly added column
      if (idArray.includes(cmt._id)) {
        // Make the array empty
        idArray = [];
      } else {
        //If the newly added comment is not in the column then adde the comment inside the column
        // This happens only for the real time update for others who did not make the drag and drop

        let con = document
          .getElementById(`${parentID}`)
          .querySelector(".card-comment"); // Get the parent column of the comment
        let cc = document.getElementById(`${cmt._id}`); //Get the comment

        // Remove the comment from the column
        con.removeChild(cc);

        // Make the array empty
        idArray = [];

        // ===== Check=========
        // let draggable = document.querySelector(".dragging");
  
        // ===== End Check=========

        
        // Create a html element for the comment
        let commentHtml;
        // Create a html element for the comment
        // console.log(currentUsername);
        // console.log(cmtUser)
        // console.log(boardOwnername)

        if (currentUsername == cmtUser || currentUsername.trim() == boardOwnername.trim()) {
          console.log('yes')
          commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmt._id}>
                            <div class="card-body">
                              <div class="delete-comment">
                                <img
                                  class="remove-comment"
                                  src="/img/xmark.svg"
                                  alt="like"
                                  style="height: 1em; width: 1em"
                                />
                              </div>
                                <p class="card-text comment-edit">
                                    ${cmt.content}
                                </p>
                                    <div class="like-dislike">
                                      <p class="comment-owner">${cmtUser}</p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                    </div>
                            </div>
                        </div>   `;
        }else{
          console.log('no')
          commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmt._id}>
                            <div class="card-body">
                          
                                <p class="card-text comment-edit">
                                    ${cmt.content}
                                </p>
                                    <div class="like-dislike">
                                      <p class="comment-owner">${cmtUser}</p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                    </div>
                            </div>
                        </div>   `;

        }

        // Insert the html element to the comments under the coresponding column
        newColumn.insertAdjacentHTML("beforeend", commentHtml);
        // location.reload();
        dragStartEnd();
        addCommentEdit();
        // dragSocket();
        deleteComment();
      }
    });
  };

  const dragOver = () => {
    comments.forEach((container) => {
      container.addEventListener("dragover", (e) => {
        e.preventDefault();
        dragStartEnd();
        dragSocket();
        deleteComment();

        const draggable = document.querySelector(".dragging");
        if (parentColumn == undefined) {
          if(draggable){
            parentColumn = draggable.parentNode.parentNode;
          }
        }
        appendContainer = container;
      });
    });
  };
  
  // logic for editing in realtime plus the eventlisteners is uses.
  function realTimeEdit(e){
    e = e || window.event;

    let commentTextBox = e.path[0];
          
          
      let val = commentTextBox.textContent;
          val = val.trim();

          commentTextBox.innerHTML =
          '<form><input type="text" value="' + val + '"></input></form>';
          commentTextBox.childNodes[0].childNodes[0].focus();

          // On Blur (click away)- Comment update
          commentTextBox.childNodes[0].childNodes[0].addEventListener(
          "blur",
          function (e) {
              socket.emit(
              "commentEdit",
              commentTextBox.childNodes[0].childNodes[0].value,
              commentTextBox.parentNode.parentNode.id
              );
              commentTextBox.innerHTML =
              "<p>" + commentTextBox.childNodes[0].childNodes[0].value + "<\p>";
          });

          // On Enter - Comment update
          commentTextBox.childNodes[0].addEventListener("submit", function (e) {
          socket.emit(
              "commentEdit",
              commentTextBox.childNodes[0].childNodes[0].value,
              commentTextBox.parentNode.parentNode.id
            );
          e.preventDefault();
          //commentTextBox.innerHTML = "<p>"+commentTextBox.childNodes[0].childNodes[0].value+"<\p>";
          });
        } 

  const addCommentEdit = () => {
    let commentEdit = document.getElementsByClassName("comment-edit");

    // Updating comment
    for (let i = 0; i < commentEdit.length; i++) {
      // only comment owner and boardOwnername can edit.
      if((commentEdit[i].parentNode.childNodes[1].value === currentUser) || (currentUsername.trim() == boardOwnername.trim()) ){
        
        // Double clicking a Comment
        commentEdit[i].addEventListener("dblclick", realTimeEdit);  
      }
    }
  };

  // == End Functions===================================

  deleteComment();

  //  Give submit to all the forms in a board
  for (let i = 0; i < form.length; i++) {
    form[i].addEventListener("submit", function (e) {
      e.preventDefault();
      if (input[i].value) {
        // Send newly created board to the server side (To handle real time)
        socket.emit(
          "board comment",
          input[i].value,
          form[i].parentNode.id,
          currentUser,
          anonymous[i].checked 
        ); // Emit input value and the column id
        input[i].value = "";
      }
    });
  }

  // Reveive real time update from the server side
  // Recevied comment, commentId(Mongo Id) and the column Id
  socket.on("board comment", function (cmt, cmtID, columnID, cmtUser, isanonymous) {
    for (let i = 0; i < comments.length; i++) {
      if (comments[i].parentNode.id == columnID) {
        // Create an html element for newly created comment

        console.log(boardOwnername)

        let commentHtml;

        if( !isanonymous){ // public comment
            if (currentUsername == cmtUser || currentUsername == boardOwnername) { // is delete-able
            commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmtID}>
                            <div class="card-body">
                              <div class="delete-comment">
                                <img
                                  class="remove-comment"
                                  src="/img/xmark.svg"
                                  alt="like"
                                  style="height: 1em; width: 1em"
                                />
                              </div>
                                <p class="card-text comment-edit">
                                    ${cmt}
                                </p>
                                <div class="like-dislike">
                                        <p class="comment-owner">${cmtUser}</p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                </div>
                            </div>
                        </div>   `;
            } else { // non-delete-able
            commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmtID}>
                            <div class="card-body">
                        
                                <p class="card-text comment-edit">
                                    ${cmt}
                                </p>
                                <div class="like-dislike">
                                        <p class="comment-owner">${cmtUser}</p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                </div>
                            </div>
                        </div>   `;
            }
            
        }else{ // anonyous comment
            
            if (currentUsername == cmtUser || currentUsername == boardOwnername) { // is delete-able
            console.log(currentUsername)
            console.log(boardOwnername)
            commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmtID}>
                            <div class="card-body">
                              <div class="delete-comment">
                                <img
                                  class="remove-comment"
                                  src="/img/xmark.svg"
                                  alt="like"
                                  style="height: 1em; width: 1em"
                                />
                              </div>
                                <p class="card-text comment-edit">
                                    ${cmt}
                                </p>
                                <div class="like-dislike">
                                        <p class="comment-owner">Anonyous</p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                </div>
                            </div>
                        </div>   `;
            } else { // non-delete-able
            commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmtID}>
                            <div class="card-body">
                        
                                <p class="card-text comment-edit">
                                    ${cmt}
                                </p>
                                <div class="like-dislike">
                                        <p class="comment-owner"></p>
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                </div>
                            </div>
                        </div>   `;
            }
        }
        

        // Insert the html element to the comments under the coresponding column
        comments[i].insertAdjacentHTML("beforeend", commentHtml);
        deleteComment();
        dragStartEnd();
        
        // if edit-able
        if(currentUsername == cmtUser || currentUsername == boardOwnername){
            document.getElementById(cmtID).childNodes[1].addEventListener("dblclick", realTimeEdit);
        }
        
        // dragSocket();
        // dragOver();
        
        // calling reload is'nt real time, 
        // We will have to remove all cases of reload, reloading on local host is fast not in irl when online,
        // location.reload();
      }
    }
  });


  dragStartEnd();
  dragSocket();
  dragOver();
  addCommentEdit();

  // when someone else updates a comment
  socket.on("commentEdit", function (cmt, commentID) {
    let commentFount = document.getElementById(commentID);
    
    for(var i = 0; i < commentFount.childNodes[1].childNodes.length; i++){
        if(commentFount.childNodes[1].childNodes[i].className == "card-text comment-edit"){
            commentFount.childNodes[1].childNodes[i].textContent = cmt;
        }
    }   
    
  });
</script>
