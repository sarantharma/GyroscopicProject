<% layout('layouts/boilerplate') %>

<h1 class="board-title"><%= board.name %></h1>
<p class="board-description"><%= board.description %></p>
<p class="board-date text-muted"><%= board.date.toLocaleString("en-US") %></p>

<div class="d-flex justify-content-evenly">
  <% for(let column of board.columns){ %>

  <!-- card for each column -->
  <div class="card column" id="<%=`${column._id}`%>">
    <h5 class="card-title"><%=column.header%></h5>

    <!-- <div class="comment-form-div"> -->
    <!-- _${column.columnOrder} -->
    <form class="comment-form" action="">
      <textarea
        class="form-control comment-textarea"
        type="text"
        name="board[description]"
        required
      ></textarea>
      <button class="btn comment-button">Send</button>
    </form>
    <!-- </div> -->

    <!-- Comments -->
    <div class="card-comment">
      <% for(let comment of column.comments){ %>
      <div class="card mb-2 draggable" draggable="true" id="<%=comment._id%>">
        <div class="card-body">
          <div class="delete-comment">
            <img
              class="remove-comment"
              src="/img/xmark.svg"
              alt="like"
              style="height: 1em; width: 1em"
            />
          </div>
          <p class="card-text comment-edit"><%=comment.content%></p>
          <div class="like-dislike">
            <img
              src="/img/like.svg"
              alt="like"
              style="height: 1em; width: 1em"
            />
            <img
              src="/img/dislike.svg"
              alt="dislike"
              style="height: 1em; width: 1em"
            />
            <img
              src="/img/comment.svg"
              alt="comment"
              style="height: 1em; width: 1em"
            />
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </div>
  <% } %>
</div>

<div class="all-buttons">
  <a href="/boards/<%=board._id%>/edit"
    ><button class="btn btn-outline-secondary">Edit</button></a
  >

  <form action="/boards/<%=board._id%>?_method=DELETE" method="POST">
    <button class="btn btn-outline-danger">Delete</button>
  </form>

  <a href="/boards"><button class="btn btn-outline-info">All Boards</button></a>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  // Temperary Variables
  let parentColumn;
  let appendContainer;
  let newColumn;
  let currentDragging;

  // Initiate Socket in show.ejs
  const socket = io();

  // Get html elements
  const form = document.getElementsByClassName("comment-form"); // Comment form to create a comment
  const input = document.getElementsByClassName("comment-textarea"); // Text area to type a comment
  const comments = document.querySelectorAll(".card-comment"); // All comments
  let removes = document.querySelectorAll(".remove-comment");

  let draggables = document.querySelectorAll(".draggable"); // Single comments (each comment is draggable)

  // ==Functions =======================================
  const deleteComment = () => {
    draggables = document.querySelectorAll(".card-comment"); 
    removes = document.querySelectorAll(".remove-comment");
    draggables.forEach((comment) => {
    });

    removes.forEach((remove) => {
      remove.addEventListener("click", (e) => {
        console.log(e.target.offsetParent.id);
        socket.emit("remove comment", e.target.offsetParent.id);
      });
    });

    socket.on("remove comment", (cmtID) => {
      const deleteComment = document.getElementById(`${cmtID}`);
      if(deleteComment){

        deleteComment.remove();
      }
    });
  };

  const dragStartEnd = () => {
    //  Treverse through all the draggable elements
    draggables = document.querySelectorAll(".draggable");
    draggables.forEach((draggable) => {
      // The start tof dragging
      draggable.addEventListener("dragstart", () => {
        draggable.classList.add("dragging"); //Add a class called "dragging" to the dragging element
        console.log("drag start");
        console.log(draggable);
      });

      // The end of dragging
      draggable.addEventListener("dragend", () => {
        const draggable = document.querySelector(".dragging"); //select the dragging element
        currentDragging = draggable; //Set it to a global variable
        appendContainer.appendChild(draggable); //Append the draggable element to the container (correspoding column)
        draggable.classList.remove("dragging"); //Remove the dragging class from the dragging element (after append)

        newColumn = draggable.parentNode.parentNode; //Set the newly added column into a global variable

        // Send the dragged and dropped element to the server side (Real time)
        socket.emit(
          "drag comment",
          draggable.id,
          parentColumn.id,
          newColumn.id
        );

        parentColumn = undefined; //Set the global variable undifined
      });
    });
  };

  const dragSocket = () => {
    // Reveive real time update from the server side for drag and drop
    // Recevied comment, new column Id, parent column Id
    socket.on("drag comment", function (cmt, newColumnId, parentID) {
      const comment = document.getElementById(`${cmt._id}`); //Get the comment
      const checkComment = comment.parentNode;
      const newColumn = document
        .getElementById(`${newColumnId}`)
        .querySelector(".card-comment"); // Get the newly dropped column

      const draggables = newColumn.querySelectorAll(".draggable"); // Get all the draggable element from the newly added column

      // temporary id array for draggables
      let idArray = [];

      // push all the draggable id to the temporary array
      draggables.forEach((draggable) => {
        idArray.push(draggable.id);
      });

      // Check if the draggable already included to the newly added column
      if (idArray.includes(cmt._id)) {
        // Make the array empty
        idArray = [];
      } else {
        //If the newly added comment is not in the column then adde the comment inside the column
        // This happens only for the real time update for others who did not make the drag and drop

        let con = document
          .getElementById(`${parentID}`)
          .querySelector(".card-comment"); // Get the parent column of the comment
        let cc = document.getElementById(`${cmt._id}`); //Get the comment

        // Remove the comment from the column
        con.removeChild(cc);

        // Make the array empty
        idArray = [];

        // Create a html element for the comment
        let commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmt._id}>
                            <div class="card-body">
                              <div class="delete-comment">
                                <img
                                  class="remove-comment"
                                  src="/img/xmark.svg"
                                  alt="like"
                                  style="height: 1em; width: 1em"
                                />
                              </div>
                                <p class="card-text comment-edit">
                                    ${cmt.content}
                                </p>
                                    <div class="like-dislike">
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                        <img src="/img/comment.svg" alt="comment" style="height: 1em; width: 1em;">
                                    </div>
                            </div>
                        </div>   `;

        // Insert the html element to the comments under the coresponding column
        newColumn.insertAdjacentHTML("beforeend", commentHtml);
        // location.reload()
        dragStartEnd();
        addCommentEdit();
        // dragSocket();
      }
    });
  };

  const dragOver = () => {
    comments.forEach((container) => {
      container.addEventListener("dragover", (e) => {
        e.preventDefault();
        dragStartEnd();
        dragSocket();
        const draggable = document.querySelector(".dragging");
        if (parentColumn == undefined) {
          console.log(draggable);
          parentColumn = draggable.parentNode.parentNode;
        }
        appendContainer = container;
      });
    });
  };

  const addCommentEdit = () => {
    let commentEdit = document.getElementsByClassName("comment-edit");

    // Updating comment
    for (let i = 0; i < commentEdit.length; i++) {
      // Double clicking a Comment
      commentEdit[i].addEventListener("dblclick", function (e) {
        let commentTextBox = e.path[0];

        let val = commentTextBox.textContent;
        val = val.trim();

        commentTextBox.innerHTML =
          '<form><input type="text" value="' + val + '"></input></form>';
        commentTextBox.childNodes[0].childNodes[0].focus();

        // On Blur - Comment update
        commentTextBox.childNodes[0].childNodes[0].addEventListener(
          "blur",
          function (e) {
            socket.emit(
              "commentEdit",
              commentTextBox.childNodes[0].childNodes[0].value,
              commentTextBox.parentNode.parentNode.id
            );
            commentTextBox.innerHTML =
              "<p>" + commentTextBox.childNodes[0].childNodes[0].value + "<\p>";
          }
        );

        // On Enter - Comment update
        commentTextBox.childNodes[0].addEventListener("submit", function (e) {
          socket.emit(
            "commentEdit",
            commentTextBox.childNodes[0].childNodes[0].value,
            commentTextBox.parentNode.parentNode.id
          );
          e.preventDefault();
          //	commentTextBox.innerHTML = "<p>"+commentTextBox.childNodes[0].childNodes[0].value+"<\p>";
        });
      });
    }
  };

  // == End Functions===================================

  deleteComment();
  //  Give submit to all the forms in a board
  for (let i = 0; i < form.length; i++) {
    form[i].addEventListener("submit", function (e) {
      e.preventDefault();
      if (input[i].value) {
        // Send newly created board to the server side (To handle real time)
        socket.emit("board comment", input[i].value, form[i].parentNode.id); // Emit input value and the column id
        input[i].value = "";
      }
    });
  }

  // Reveive real time update from the server side
  // Recevied comment, commentId(Mongo Id) and the column Id
  socket.on("board comment", function (cmt, cmtID, columnID) {
    for (let i = 0; i < comments.length; i++) {
      if (comments[i].parentNode.id == columnID) {
        // Create an html element for newly created comment
        const commentHtml = `<div class="card mb-2 draggable" draggable="true" id=${cmtID}>
                            <div class="card-body">
                              <div class="delete-comment">
                                <img
                                  class="remove-comment"
                                  src="/img/xmark.svg"
                                  alt="like"
                                  style="height: 1em; width: 1em"
                                />
                              </div>
                                <p class="card-text comment-edit">
                                    ${cmt}
                                </p>
                                <div class="like-dislike">
                                        <img src="/img/like.svg" alt="like" style="height: 1em; width: 1em;">
                                        <img src="/img/dislike.svg" alt="dislike" style="height: 1em; width: 1em;">
                                        <img src="/img/comment.svg" alt="comment" style="height: 1em; width: 1em;">
                                </div>
                            </div>
                        </div>   `;

        // Insert the html element to the comments under the coresponding column
        comments[i].insertAdjacentHTML("beforeend", commentHtml);
        deleteComment();
        // // ######################################################
        // dragStartEnd();
        // dragSocket();

        dragOver();
        // ######################################################
      }
    }
  });

  // ######################################################

  dragStartEnd();
  dragSocket();
  dragOver();
  addCommentEdit();

  // when someone else updates a comment
  socket.on("commentEdit", function (cmt, commentID) {
    let commentFount = document.getElementById(commentID);
    commentFount.childNodes[1].childNodes[1].textContent = cmt;
  });
</script>
